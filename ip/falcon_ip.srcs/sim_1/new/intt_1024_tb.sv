`timescale 1ns / 1ps
`include "common_definitions.vh"

module intt_1024_tb;

  parameter int N = 1024;

  logic clk;
  logic rst_n;

  logic mode;
  logic start;
  logic done;

  logic signed[14:0] expected_polynomial [N];

  logic finished, finished_i, finished_ii;
  int index = 0;

  logic [`BRAM_ADDR_WIDTH-1:0] bram1_addr_a, bram1_addr_a_ntt, bram1_addr_a_validate;
  logic [`BRAM_DATA_WIDTH-1:0] bram1_din_a, bram1_dout_a, bram1_dout_a_ntt, bram1_dout_a_validate;
  logic bram1_we_a;
  logic [`BRAM_ADDR_WIDTH-1:0] bram1_addr_b, bram1_addr_b_ntt, bram1_addr_b_validate;
  logic [`BRAM_DATA_WIDTH-1:0] bram1_din_b, bram1_dout_b, bram1_dout_b_ntt, bram1_dout_b_validate;
  logic bram1_we_b;
  bram_6144x128_preinit_for_ntt1024_tb bram1 (
                                     .clka(clk),
                                     .addra(bram1_addr_a),
                                     .dina(bram1_din_a),
                                     .wea(bram1_we_a),
                                     .douta(bram1_dout_a),

                                     .clkb(clk),
                                     .addrb(bram1_addr_b),
                                     .dinb(bram1_din_b),
                                     .web(bram1_we_b),
                                     .doutb(bram1_dout_b)
                                   );

  logic [`BRAM_ADDR_WIDTH-1:0] bram2_addr_a;
  logic [`BRAM_DATA_WIDTH-1:0] bram2_din_a, bram2_dout_a, bram2_dout_a_ntt, bram2_dout_a_validate;
  logic bram2_we_a;
  logic [`BRAM_ADDR_WIDTH-1:0] bram2_addr_b;
  logic [`BRAM_DATA_WIDTH-1:0] bram2_din_b, bram2_dout_b;
  logic bram2_we_b;
  bram_6144x128 bram2 (
                  .clka(clk),
                  .addra(bram2_addr_a),
                  .dina(bram2_din_a),
                  .douta(bram2_dout_a),
                  .wea(bram2_we_a),

                  .clkb(clk),
                  .addrb(bram2_addr_b),
                  .dinb(bram2_din_b),
                  .doutb(bram2_dout_b),
                  .web(bram2_we_b)
                );

  ntt #(
        .N(N)
      )uut(
        .clk(clk),
        .rst_n(rst_n),
        .mode(mode),
        .start(start),
        .done(done),

        .bram1_addr_a(bram1_addr_a_ntt),
        .bram1_din_a(bram1_din_a),
        .bram1_dout_a(bram1_dout_a_ntt),
        .bram1_we_a(bram1_we_a),
        .bram1_addr_b(bram1_addr_b_ntt),
        .bram1_din_b(bram1_din_b),
        .bram1_dout_b(bram1_dout_b_ntt),
        .bram1_we_b(bram1_we_b),

        .bram2_addr_a(bram2_addr_a),
        .bram2_din_a(bram2_din_a),
        .bram2_dout_a(bram2_dout_a),
        .bram2_we_a(bram2_we_a),
        .bram2_addr_b(bram2_addr_b),
        .bram2_din_b(bram2_din_b),
        .bram2_dout_b(bram2_dout_b),
        .bram2_we_b(bram2_we_b)
      );

  // Check if result is correct
  always_ff @(posedge clk) begin
    if(finished_ii === 1 && index < N/2) begin
      if(bram1_dout_a_validate !== expected_polynomial[index])
        $fatal(1, "Test failed at index %d. Expected %d, got %d", index, expected_polynomial[index], bram1_dout_a_validate);
      if(bram1_dout_b_validate !== expected_polynomial[index + N/2])
        $fatal(1, "Test failed at index %d. Expected %d, got %d", index + N/2, expected_polynomial[index + N/2], bram1_dout_b_validate);
      index++;
    end

    finished_i <= finished;
    finished_ii <= finished_i;
  end

  always_comb begin
    if (finished == 1'b0) begin
      bram1_addr_a = bram1_addr_a_ntt;
      bram1_addr_b = bram1_addr_b_ntt;
      bram1_dout_a_ntt = bram1_dout_a;
      bram1_dout_b_ntt = bram1_dout_b;
    end
    else begin
      bram1_addr_a = bram1_addr_a_validate;
      bram1_addr_b = bram1_addr_b_validate;
      bram1_dout_a_validate = bram1_dout_a;
      bram1_dout_b_validate = bram1_dout_b;
    end
  end

  always #5 clk = ~clk;

  initial begin
    finished = 0;

    clk = 1;

    rst_n = 0;
    #10;
    rst_n = 1;
    mode = 1;
    expected_polynomial = '{6656, 6148, 4426, 6300, 2909, 1372, 5949, 5940, 1768, 3985, 4718, 11449, 10704, 1212, 7457, 1429, 27, 11393, 6963, 6134, 9165, 6136, 5951, 12229, 10232, 3373, 7192, 9522, 11200, 678, 5381, 1098, 8790, 4173, 2493, 9748, 11628, 8720, 5755, 12175, 11856, 6053, 4224, 571, 9315, 10217, 503, 2026, 3477, 4613, 7162, 8088, 8648, 8254, 5292, 7508, 5332, 7241, 1379, 6476, 7536, 664, 120, 10833, 2073, 12169, 8113, 12283, 9943, 10870, 8892, 1053, 9343, 4758, 1053, 10274, 7005, 2039, 1613, 9272, 8916, 12190, 453, 11956, 2820, 4517, 3749, 1709, 5295, 10096, 11295, 8984, 8669, 335, 4128, 10786, 2611, 5289, 10147, 9360, 3482, 6677, 2107, 7167, 2534, 445, 11594, 625, 7105, 8419, 2513, 10226, 8673, 8109, 2163, 5876, 4123, 11726, 8330, 3317, 11105, 86, 6902, 4862, 1918, 4634, 4837, 468, 4015, 11774, 6931, 808, 2885, 10222, 6545, 7036, 1244, 6463, 6971, 7222, 3984, 8417, 9226, 2260, 3081, 2459, 9597, 6770, 10470, 5601, 11899, 469, 11221, 576, 12189, 11872, 7319, 7288, 3681, 2102, 10242, 2001, 2276, 5356, 5416, 1946, 8847, 11246, 5115, 9710, 10143, 6841, 3865, 1158, 196, 10499, 4553, 8151, 10638, 2044, 7211, 8331, 2193, 2059, 7801, 3397, 9351, 7974, 1649, 6581, 5715, 8139, 448, 10974, 8039, 7722, 10193, 11964, 4608, 10182, 921, 5174, 9462, 3053, 1510, 12007, 4945, 7258, 11593, 8502, 9131, 8182, 11451, 1672, 10348, 3699, 6322, 2329, 7069, 4235, 5775, 10842, 8607, 5916, 6666, 1245, 7551, 2454, 7016, 9503, 11719, 6021, 10004, 9264, 12186, 4198, 5720, 1412, 6999, 12103, 10776, 7730, 8930, 2148, 9931, 5372, 3685, 6254, 6630, 4849, 39, 1633, 9518, 9280, 8722, 2496, 3142, 9189, 2458, 4031, 2506, 5744, 5857, 7104, 12279, 1384, 4614, 2294, 89, 749, 10040, 2263, 6720, 9967, 2011, 993, 8562, 7975, 4569, 948, 4535, 743, 4654, 8031, 178, 3669, 9708, 6803, 8571, 9300, 12024, 10344, 10836, 7843, 1550, 4958, 10750, 6603, 9493, 5014, 6401, 4087, 3750, 4394, 1070, 2940, 9912, 8586, 6487, 8450, 9873, 8168, 7925, 510, 1963, 10136, 9662, 1680, 1026, 2195, 4545, 122, 3149, 6433, 9706, 8346, 9343, 319, 1946, 4925, 12174, 8913, 8847, 1258, 1207, 10415, 5283, 1519, 5221, 1146, 1651, 69, 3248, 9396, 2563, 4600, 10918, 4616, 11444, 11024, 6194, 10225, 12, 9371, 5225, 7641, 10426, 1639, 3774, 8311, 9550, 3797, 11820, 2725, 9757, 12088, 10741, 6565, 1662, 4471, 1849, 239, 12080, 12036, 9394, 10694, 11822, 1771, 7888, 11868, 1233, 1025, 8155, 6635, 6017, 899, 1385, 7691, 10683, 10507, 8940, 5778, 7341, 9040, 47, 7386, 12145, 8266, 4399, 3626, 2758, 2739, 3901, 11398, 9817, 10409, 6516, 6699, 12058, 11668, 11044, 3187, 10662, 2100, 4889, 4510, 5474, 3934, 5963, 8857, 5653, 5315, 1403, 6395, 3098, 5476, 8168, 9787, 10186, 9023, 6803, 7135, 8104, 9861, 10106, 2964, 6278, 6871, 4434, 8415, 4320, 7903, 3764, 3457, 3788, 3677, 6200, 4205, 11255, 9159, 6966, 7477, 2975, 2731, 11808, 5502, 10654, 1795, 2597, 3767, 3145, 10471, 4131, 4961, 7897, 3123, 192, 6416, 6797, 1446, 6102, 2402, 10619, 2505, 6531, 708, 248, 7061, 10518, 5953, 331, 164, 3730, 4020, 9450, 7766, 8590, 11727, 8092, 3027, 7698, 1895, 9326, 6158, 1978, 6937, 2282, 11022, 10421, 11046, 11235, 5687, 4893, 6029, 4892, 7826, 8874, 11706, 1259, 4412, 4155, 5461, 2335, 5461, 4155, 4412, 1259, 11706, 8874, 7826, 4892, 6029, 4893, 5687, 11235, 11046, 10421, 11022, 2282, 6937, 1978, 6158, 9326, 1895, 7698, 3027, 8092, 11727, 8590, 7766, 9450, 4020, 3730, 164, 331, 5953, 10518, 7061, 248, 708, 6531, 2505, 10619, 2402, 6102, 1446, 6797, 6416, 192, 3123, 7897, 4961, 4131, 10471, 3145, 3767, 2597, 1795, 10654, 5502, 11808, 2731, 2975, 7477, 6966, 9159, 11255, 4205, 6200, 3677, 3788, 3457, 3764, 7903, 4320, 8415, 4434, 6871, 6278, 2964, 10106, 9861, 8104, 7135, 6803, 9023, 10186, 9787, 8168, 5476, 3098, 6395, 1403, 5315, 5653, 8857, 5963, 3934, 5474, 4510, 4889, 2100, 10662, 3187, 11044, 11668, 12058, 6699, 6516, 10409, 9817, 11398, 3901, 2739, 2758, 3626, 4399, 8266, 12145, 7386, 47, 9040, 7341, 5778, 8940, 10507, 10683, 7691, 1385, 899, 6017, 6635, 8155, 1025, 1233, 11868, 7888, 1771, 11822, 10694, 9394, 12036, 12080, 239, 1849, 4471, 1662, 6565, 10741, 12088, 9757, 2725, 11820, 3797, 9550, 8311, 3774, 1639, 10426, 7641, 5225, 9371, 12, 10225, 6194, 11024, 11444, 4616, 10918, 4600, 2563, 9396, 3248, 69, 1651, 1146, 5221, 1519, 5283, 10415, 1207, 1258, 8847, 8913, 12174, 4925, 1946, 319, 9343, 8346, 9706, 6433, 3149, 122, 4545, 2195, 1026, 1680, 9662, 10136, 1963, 510, 7925, 8168, 9873, 8450, 6487, 8586, 9912, 2940, 1070, 4394, 3750, 4087, 6401, 5014, 9493, 6603, 10750, 4958, 1550, 7843, 10836, 10344, 12024, 9300, 8571, 6803, 9708, 3669, 178, 8031, 4654, 743, 4535, 948, 4569, 7975, 8562, 993, 2011, 9967, 6720, 2263, 10040, 749, 89, 2294, 4614, 1384, 12279, 7104, 5857, 5744, 2506, 4031, 2458, 9189, 3142, 2496, 8722, 9280, 9518, 1633, 39, 4849, 6630, 6254, 3685, 5372, 9931, 2148, 8930, 7730, 10776, 12103, 6999, 1412, 5720, 4198, 12186, 9264, 10004, 6021, 11719, 9503, 7016, 2454, 7551, 1245, 6666, 5916, 8607, 10842, 5775, 4235, 7069, 2329, 6322, 3699, 10348, 1672, 11451, 8182, 9131, 8502, 11593, 7258, 4945, 12007, 1510, 3053, 9462, 5174, 921, 10182, 4608, 11964, 10193, 7722, 8039, 10974, 448, 8139, 5715, 6581, 1649, 7974, 9351, 3397, 7801, 2059, 2193, 8331, 7211, 2044, 10638, 8151, 4553, 10499, 196, 1158, 3865, 6841, 10143, 9710, 5115, 11246, 8847, 1946, 5416, 5356, 2276, 2001, 10242, 2102, 3681, 7288, 7319, 11872, 12189, 576, 11221, 469, 11899, 5601, 10470, 6770, 9597, 2459, 3081, 2260, 9226, 8417, 3984, 7222, 6971, 6463, 1244, 7036, 6545, 10222, 2885, 808, 6931, 11774, 4015, 468, 4837, 4634, 1918, 4862, 6902, 86, 11105, 3317, 8330, 11726, 4123, 5876, 2163, 8109, 8673, 10226, 2513, 8419, 7105, 625, 11594, 445, 2534, 7167, 2107, 6677, 3482, 9360, 10147, 5289, 2611, 10786, 4128, 335, 8669, 8984, 11295, 10096, 5295, 1709, 3749, 4517, 2820, 11956, 453, 12190, 8916, 9272, 1613, 2039, 7005, 10274, 1053, 4758, 9343, 1053, 8892, 10870, 9943, 12283, 8113, 12169, 2073, 10833, 120, 664, 7536, 6476, 1379, 7241, 5332, 7508, 5292, 8254, 8648, 8088, 7162, 4613, 3477, 2026, 503, 10217, 9315, 571, 4224, 6053, 11856, 12175, 5755, 8720, 11628, 9748, 2493, 4173, 8790, 1098, 5381, 678, 11200, 9522, 7192, 3373, 10232, 12229, 5951, 6136, 9165, 6134, 6963, 11393, 27, 1429, 7457, 1212, 10704, 11449, 4718, 3985, 1768, 5940, 5949, 1372, 2909, 6300, 4426, 6148};

    // Start NTT
    start <= 1;
    #10;
    start <= 0;

    // Wait for NTT to finish
    while (!done)
      #10;

    finished <= 1;
    bram1_addr_a_validate <= 0;
    bram1_addr_b_validate <= N/2;
    for (int i = 0; i < N/2; i++) begin
      #10;
      bram1_addr_a_validate++;
      bram1_addr_b_validate++;
    end

    $display("All tests for intt_1024 passed!");
    $finish;

  end

endmodule
