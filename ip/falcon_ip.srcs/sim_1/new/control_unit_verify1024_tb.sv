`timescale 1ns / 1ps
`include "common_definitions.vh"

module control_unit_verify1024_tb;

  parameter int N = 1024;
  parameter int MESSAGE_BLOCKS = 1+7; // First block is the length (in bytes)
  parameter int SIGNATURE_BLOCKS = 78;  // 1280-1-40 bytes / 16 bytes per block
  logic signed [14:0] public_key[N] = '{6857, 4524, 6980, 4278, 8521, 9214, 399, 11461, 10346, 9318, 2768, 1272, 396, 5635, 2424, 3623, 2071, 9145, 8766, 3391, 4900, 10525, 6985, 3336, 5084, 11240, 5203, 4517, 7825, 974, 6450, 11728, 3727, 1190, 1946, 2049, 10661, 1728, 1985, 8185, 9223, 9410, 912, 7934, 2032, 377, 5915, 4515, 2076, 4073, 2109, 6749, 7387, 4215, 11826, 2227, 4483, 10801, 6125, 5658, 4570, 11193, 3749, 10418, 5800, 7159, 310, 2683, 453, 5616, 5109, 11698, 1957, 11587, 11845, 11324, 3939, 3660, 6103, 1382, 6149, 6923, 1333, 7200, 9403, 5990, 10319, 3473, 4771, 3113, 1322, 6743, 7880, 11899, 3652, 1437, 6650, 8034, 11683, 11315, 2877, 8676, 9741, 10509, 10783, 10635, 11008, 213, 3492, 8626, 9271, 4771, 5099, 10209, 6359, 7738, 10860, 5853, 4632, 9862, 5942, 252, 10959, 11867, 1685, 4189, 5995, 11443, 5328, 10337, 2968, 5209, 8779, 4330, 7128, 11161, 9016, 12220, 4751, 4429, 7602, 5861, 7151, 7129, 772, 4128, 8860, 4537, 4010, 1037, 1692, 11048, 6880, 3575, 11950, 2203, 2670, 3213, 3925, 9414, 6968, 11107, 11333, 11878, 11390, 3409, 1632, 5743, 11214, 4130, 5383, 10064, 8173, 11054, 5112, 7029, 2850, 1905, 7673, 3131, 3383, 10728, 8997, 4775, 6026, 206, 1602, 6698, 84, 8650, 4051, 2857, 1654, 10234, 3560, 2220, 10072, 4755, 711, 3377, 3830, 1588, 6249, 9108, 6301, 718, 4896, 4000, 5810, 14, 7962, 11835, 1619, 10486, 3549, 3698, 4990, 2693, 2161, 7265, 7865, 10853, 5758, 532, 9771, 9170, 9181, 10730, 943, 12226, 10180, 12238, 7892, 740, 1961, 2829, 676, 5308, 8939, 9874, 11816, 8850, 2977, 2717, 535, 11753, 2410, 4915, 8862, 3229, 87, 8181, 6423, 2900, 7322, 2728, 11030, 9252, 660, 8255, 5084, 9638, 9905, 300, 10871, 8115, 3921, 10583, 8542, 11888, 8610, 12287, 8303, 4353, 1249, 8437, 4800, 11879, 11321, 226, 394, 3180, 8426, 8815, 11081, 10343, 5780, 3187, 8139, 8663, 3271, 8829, 3961, 8000, 10424, 8944, 8953, 8797, 11506, 9527, 5086, 3654, 2990, 2609, 9285, 10676, 2126, 8322, 8388, 2907, 1729, 8000, 11960, 10595, 12191, 6735, 9877, 2994, 5468, 8463, 9718, 2, 1224, 9842, 2220, 7347, 10016, 5484, 11643, 3603, 4027, 8718, 1504, 5330, 6070, 6726, 10243, 5581, 11371, 2288, 998, 11901, 9880, 8241, 3448, 10681, 12014, 564, 4560, 6851, 9235, 5722, 10116, 12008, 702, 9412, 1818, 2166, 2521, 3449, 9976, 1317, 8202, 2198, 2879, 9909, 8232, 4358, 9168, 2723, 6954, 7861, 1599, 21, 768, 2337, 8793, 3970, 3427, 6800, 3319, 10882, 3474, 11336, 6751, 2944, 2916, 2479, 6692, 10943, 1129, 10958, 9778, 4105, 1160, 1789, 4091, 11799, 9847, 4003, 7156, 6, 7913, 5539, 930, 5480, 4256, 4410, 11099, 7276, 858, 2462, 7336, 7936, 10066, 9162, 1859, 4488, 7896, 9090, 433, 11723, 12017, 2998, 2568, 7557, 3811, 5754, 6153, 2684, 6011, 745, 3994, 10864, 26, 6792, 4045, 12039, 8465, 9526, 3324, 4640, 2950, 11189, 11560, 10968, 3467, 9643, 3390, 3105, 11058, 10171, 7104, 2221, 2882, 10809, 7349, 5094, 2277, 11876, 5610, 9833, 11556, 9212, 1093, 4875, 1258, 6525, 1379, 6528, 8903, 6134, 6783, 3749, 7107, 7032, 6685, 5443, 5050, 10430, 12242, 11782, 9733, 1619, 3481, 11713, 8961, 1719, 6641, 2111, 578, 6688, 317, 11397, 6930, 6025, 12121, 9635, 11230, 6031, 4549, 10556, 5810, 915, 9655, 9997, 9300, 11651, 3638, 6822, 2744, 6442, 11872, 4596, 9029, 6843, 7691, 146, 8712, 5846, 9537, 2265, 8123, 10530, 3748, 10109, 4081, 8648, 6032, 243, 5257, 7387, 3266, 11825, 9483, 5681, 8116, 6123, 5512, 1832, 12174, 6471, 5779, 9994, 5717, 3438, 10887, 7041, 5482, 5776, 5052, 1277, 113, 1592, 397, 11378, 8540, 5539, 2871, 4794, 3498, 6522, 9072, 11037, 7679, 7192, 3190, 4453, 10689, 7319, 4307, 9129, 611, 8733, 7051, 2177, 4032, 400, 8267, 10724, 6343, 11699, 2709, 2348, 9276, 199, 8140, 1116, 4362, 10542, 7509, 4463, 3631, 8311, 10476, 4188, 5615, 541, 11358, 10783, 2653, 5769, 7483, 233, 7151, 7427, 6954, 8993, 8388, 2634, 2867, 8188, 10115, 9728, 10919, 2716, 2602, 10405, 8148, 7446, 4372, 4018, 7482, 9473, 6256, 743, 11460, 2574, 10848, 7890, 6186, 277, 8438, 6377, 9923, 1538, 8021, 1912, 2915, 8575, 7640, 1224, 6644, 7740, 8476, 7237, 8105, 8741, 8510, 2956, 7727, 5456, 4878, 6062, 5590, 4643, 2031, 12027, 7298, 11101, 423, 11766, 6001, 8391, 11344, 7039, 925, 12087, 4715, 7775, 2577, 12100, 10177, 7515, 8393, 7854, 7358, 2549, 8037, 7490, 9570, 11450, 7333, 9792, 6517, 6246, 6324, 5652, 4287, 2916, 10244, 6843, 1032, 10596, 10106, 412, 1649, 796, 787, 9141, 8210, 11119, 8722, 5557, 8075, 10581, 5333, 646, 11955, 8382, 10460, 249, 10396, 1425, 10106, 9653, 2083, 9412, 9482, 10358, 5238, 4889, 10735, 5696, 10184, 10472, 8912, 4715, 4135, 1850, 6734, 788, 7911, 12091, 5068, 2196, 8528, 1228, 7261, 6719, 5451, 22, 7250, 5546, 3002, 1364, 3609, 815, 9625, 6174, 11030, 1121, 5227, 11682, 127, 9743, 2882, 2013, 6410, 3887, 5624, 6044, 6535, 10445, 11640, 754, 806, 1728, 10444, 3467, 10796, 1342, 560, 6412, 9877, 4231, 1004, 7563, 6241, 6650, 7678, 9513, 9268, 5824, 756, 6364, 382, 6099, 11818, 3452, 10664, 9035, 1892, 3627, 7790, 2766, 4747, 10766, 2582, 8247, 1343, 5404, 8999, 1306, 2323, 1697, 3027, 3992, 10237, 12264, 2504, 12196, 285, 3341, 1023, 11597, 65, 3054, 7012, 3354, 3802, 6381, 11090, 7956, 8016, 5817, 3082, 7822, 10676, 10795, 9182, 3766, 1386, 7018, 9919, 4122, 4277, 994, 957, 10047, 4963, 6036, 1829, 3699, 5927, 2986, 11757, 1091, 8586, 4136, 5998, 8614, 738, 7930, 9614, 1038, 3465, 9461, 8800, 448, 4790, 6902, 557, 2952, 10752, 10914, 3678, 10642, 6378, 4775, 8587, 424, 160, 4814, 2921, 4061, 1553, 10018, 3960, 5267, 1357, 11229, 9706, 5480, 3599, 695, 9316, 12014, 8205, 274, 3219, 7113, 2914, 4379, 2025, 3948, 10733, 2075, 9903, 6767, 7202, 5303, 10864, 11908, 2946, 1579, 5946, 11135, 3629, 12006, 1620, 6884, 6120, 9640, 3085, 8987, 6885, 126, 8477, 119, 7775, 10599, 11996, 1533, 6606, 9624, 7770, 3292, 11468, 11115, 9034, 44, 1631, 3867, 10484, 8799, 6863, 10298, 6792, 10913, 1051, 3927, 3297, 5283, 7269, 10315, 8364, 7328, 2905, 9803, 8593, 1567, 7314, 934, 10166, 7739, 2512, 8874, 11011, 10479, 7844, 3646, 6388, 7202, 9880, 4708, 1057, 9014, 11431, 6222, 4398, 2374, 6684, 4743, 7242, 8114, 8995, 1222, 2096, 5121, 10994, 8697, 10848, 10235, 2380, 8095, 7857, 6687, 8380, 7399, 3751, 5398, 98, 7175, 3353, 3777, 8408, 10568, 12088, 5008, 10713, 10027, 3345, 11243, 2602, 2825, 9460, 2218, 5381, 9106, 12214, 844, 7720, 8328, 3552, 7008, 11397, 6321, 1422, 2261, 251, 11402, 176, 10570};
  logic [63:0] message_blocks[MESSAGE_BLOCKS] = '{40+12, 64'h837e8bcfb23c5981, 64'h41d5b10176855b9a, 64'h92208190cdfbc47f, 64'h92e859a168bea29f, 64'ha335ead74efe6969, 64'h6f57206f6c6c6548, 64'h0000000021646c72};
  // logic [127:0] signature_blocks[SIGNATURE_BLOCKS] = '{128'h2e3d32018ae7c7954a141b0ceb63dc88, 128'h3e0e1483b1ae7e59cb308c4927adc86b, 128'h040115d2a12dbcfe572ee0fc68742a1d, 128'h9d83b537cdd75a389d439a376f432ec8, 128'h8d03e8d8e162109ed2b0df0b031099a3, 128'h31849508da1b74596891b87d09933a81, 128'h63d1a78195e9a65607aee9afa2f1ea11, 128'h416d8c563a38fc50dbe951325eb2edb2, 128'hda9716df0e3089457db49d619477b33d, 128'h9264d84f056bff61b1917e93648e964f, 128'h4d4ef15b99e5177aa52a758d56e097c7, 128'h7a7cc3a5eae58a651782b14ed63d3c44, 128'h135807d75883273b5680e0b7cda64268, 128'h6c93dad280836272e36719dac15b587b, 128'hd92b9a40e60c8999c0a04e3c7ba3a42a, 128'hd0dc2efa9d3b27f1edfcfa5bb2655f59, 128'hba057347b06d9a41006ffac801d0538f, 128'h72bd8f89182bdd1e8f37e8e7bd9b262b, 128'h6aa73f5fcd5bd7f0b31493f31c4c44e4, 128'ha1ee3e881a951f29fc86460a6c9676cf, 128'h894af4b0afe339ddd4e2c64f3ae4d333, 128'hdb62cd947b748e8e9f3a94d395130cbd, 128'h7f79fe95b64d9ecc374f4b1b72dcb8ce, 128'hde1532760667cee5f5b7cfba2f02c09c, 128'h26ebcd4cf4bd752786bedd2d9147eba8, 128'hd6cfbdd8d94606771061f98fee31d322, 128'ha756c903f95fa9bb5ab8c43b4c49f471, 128'h6918632cb573e2222de4c12db3e3a661, 128'h0fb40ccdae9be8ce5a95874c9d0356aa, 128'he64997f570e0df27084b32d6c36afd2d, 128'hd624b7ed9ddbef298ce5105ef715b9bf, 128'ha1c6c6152c875da9859ef0d3921bcea8, 128'hf7222d0d157bd3d8b988fcbabd6eec3a, 128'ha82d613a5bf19425039340c436afa70a, 128'hf9485ce193641e44ace92c15ca842333, 128'hfe2e0aaa6a432e499b1a6cd7a62cb86c, 128'h841d0f21f225ba50d6bcb59c93651fcb, 128'h9219ec1136cfdb04fa2666e0abcddabf, 128'h7d7426970e9400000000000000000000, 128'h00000000000000000000000000000000};

  logic clk, rst_n;

  logic [127:0] instruction;
  logic instruction_done;
  logic [`BRAM_DATA_WIDTH-1:0] bram_din, bram_dout;

  logic signature_accepted;
  logic signature_rejected;

  always #5 clk = ~clk;

  control_unit #(
                 .N(N)
               ) control_unit (
                 .clk(clk),
                 .rst_n(rst_n),
                 .instruction(instruction),
                 .instruction_done(instruction_done),

                 .signature_accepted(signature_accepted),
                 .signature_rejected(signature_rejected),

                 .bram_din(bram_din),
                 .bram_dout(bram_dout)
               );

  logic [15:0] modules;
  logic [2:0] bank1, bank2, bank3, bank4, bank5, bank6;
  logic [12:0] addr1, addr2;
  logic mode;
  logic mul_const_selection;
  logic [3:0] element_count;
  logic [2:0] decompress_output2;

  assign instruction = {modules, 59'b0, decompress_output2, element_count, mul_const_selection, mode, addr2, addr1, bank6, bank5, bank4, bank3, bank2, bank1};

  initial begin

    modules = 16'b0000_0000_0000_0000;
    bank1 = 0;
    bank2 = 0;
    bank3 = 0;
    bank4 = 0;
    bank5 = 0;
    bank6 = 0;
    addr1 = 0;
    addr2 = 0;
    mode = 0;
    mul_const_selection = 0;
    element_count = 0;
    decompress_output2 = 0;

    clk = 1;

    rst_n = 0;
    #10;
    rst_n = 1;

    #10;

    // Load public key
    for (int i = 0; i < N/2; i++) begin
      modules = 16'b0100_0000_0000_0000; // BRAM_WRITE
      bank1 = 0;
      addr1 = i;
      bram_din = {49'b0, public_key[i], 49'b0, public_key[i + N/2]};
      #10;
    end
    modules = 16'b0000_0000_0000_0000; // Stop writing to BRAM
    #10;

    // // Load signature
    // for (int i = 0; i < SIGNATURE_BLOCKS; i++) begin
    //   modules = 16'b0100_0000_0000_0000; // BRAM_WRITE
    //   bank1 = 1;
    //   addr1 = i;
    //   bram_din = signature_blocks[i];
    //   #10;
    // end
    // modules = 16'b0000_0000_0000_0000; // Stop writing to BRAM
    // #10;

    // Load message len, message and salt
    for (int i = 0; i < MESSAGE_BLOCKS; i++) begin
      modules = 16'b0100_0000_0000_0000; // BRAM_WRITE
      bank1 = 6;
      addr1 = i;
      bram_din = {64'b0, message_blocks[i]}; // Write 64 bits of message, padding with zeros
      #10;
    end
    modules = 16'b0000_0000_0000_0000; // Stop writing to BRAM
    #10;

    // Run hash_to_point, decompress and NTT
    modules = 16'b0001_0010_0000_0100; // hash_to_point, NTT, decompress
    mode = 1'b0; // NTT
    bank1 = 0;
    bank2 = 2;
    bank3 = 6; // hash_to_point from bank6 to bank5
    bank4 = 5;
    bank5 = 1;  // decompress from bank1 to bank2
    bank6 = 4;
    decompress_output2 = 3;
    #10;
    while (instruction_done !== 1'b1)
      #10;
    modules = 16'b0000_0000_0000_0000; // Stop writing to BRAM
    #10;

    // Run NTT
    modules = 16'b0000_0010_0000_0000; // NTT
    mode = 1'b0; // NTT
    bank1 = 4;
    bank2 = 1;
    #10;
    while (instruction_done !== 1'b1)
      #10;
    modules = 16'b0000_0000_0000_0000; // Stop writing to BRAM
    #10;

    // Compute public_key * decompressed signature % 12289 (in NTT domain) by running mod_mult_q
    modules = 16'b0000_0000_0001_0000; // mod_mult_q
    bank1 = 1;
    bank2 = 2;
    bank3 = 4;
    element_count = $clog2(256);
    while (instruction_done !== 1'b1)
      #10;
    modules = 16'b0000_0000_0000_0000; // Stop writing to BRAM
    #10;

    // Run INTT
    modules = 16'b0000_0010_0000_0000; // NTT
    mode = 1'b1; // INTT
    bank1 = 4;
    bank2 = 1;
    #10;
    while (instruction_done !== 1'b1)
      #10;
    modules = 16'b0000_0000_0000_0000; // Stop writing to BRAM
    #10;

    // Run sub_normalize_squared_norm pipeline on the output of INTT
    modules = 16'b0000_0000_0000_1000; // sub_normalize_squared_norm
    bank1 = 5;
    bank2 = 1;
    bank3 = 3;
    element_count = $clog2(256);
    while (instruction_done !== 1'b1)
      #10;
    modules = 16'b0000_0000_0000_0000; // Stop writing to BRAM
    #10;

    while(signature_accepted === 1'b0 && signature_rejected === 1'b0)
      #10;

    if(signature_accepted === 1'b1 && signature_rejected === 1'b0)
      $display("All tests for control_unit_verify passed!");
    else
      $fatal(1, "Test failed! signature_accepted: %b, signature_rejected: %b", signature_accepted, signature_rejected);

    $finish;
  end

endmodule
