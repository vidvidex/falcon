`timescale 1ns / 1ps
`include "common_definitions.vh"

module control_unit_verify_tb;

  parameter int N = 512;
  parameter int MESSAGE_BLOCKS = 1+7; // First block is the length (in bytes)
  parameter int SIGNATURE_BLOCKS = 2+79;  // First block is the length (in bits)
  // Reorder public_key with scripts/reorder_for_bram.py so that it is in the order that NTT expects (indices: 0, N/2, 1, N/2+1, 2, N/2+2, ...)
  // logic signed [14:0] public_key[N] = '{4162, 5489, 9391, 6649, 9653, 4881, 3686, 191, 134, 209, 164, 7392, 9905, 8495, 7293, 4815, 3294, 839, 8742, 10592, 8248, 3744, 6163, 1295, 2169, 5157, 11103, 607, 10884, 8861, 3785, 2289, 9241, 7505, 5670, 6103, 4897, 1033, 5286, 1379, 10307, 641, 8319, 9477, 3892, 1451, 2889, 9928, 12176, 11807, 2460, 8461, 8496, 10919, 7983, 8422, 6967, 6227, 3056, 4623, 6298, 5439, 8560, 8381, 734, 7393, 3021, 7927, 8717, 3151, 9823, 9422, 6225, 11787, 4442, 1744, 1977, 8793, 11698, 6676, 4991, 11730, 10672, 4332, 1636, 5963, 7370, 11877, 5902, 7279, 2631, 5393, 10232, 6038, 6327, 11727, 12059, 3780, 5228, 9144, 11746, 5752, 2103, 9384, 8473, 2373, 4415, 9460, 9163, 9091, 11614, 10776, 389, 4994, 12116, 12166, 10680, 4121, 4627, 9058, 3149, 6623, 1164, 1840, 2914, 8431, 6235, 2963, 528, 10720, 1478, 6478, 1821, 4654, 12127, 737, 5896, 9191, 10386, 1782, 3535, 5625, 9292, 7681, 9356, 3219, 6170, 5368, 2464, 7362, 1800, 9627, 10561, 9312, 11010, 691, 11883, 4994, 4376, 8197, 5674, 518, 3926, 11447, 10647, 947, 9298, 2672, 11190, 2054, 7283, 4058, 12081, 100, 8265, 10632, 1508, 11487, 3465, 6563, 3042, 9701, 7049, 10832, 3938, 454, 7534, 9593, 7653, 6910, 10880, 2253, 3080, 8254, 9522, 10765, 9859, 479, 7497, 10067, 4580, 280, 2295, 1394, 1710, 3762, 4816, 9975, 9657, 2350, 1091, 5891, 6702, 8428, 5510, 5582, 11639, 6440, 8870, 4272, 7797, 4430, 12035, 10113, 2792, 2818, 6637, 10100, 1042, 3535, 6803, 1292, 2259, 12283, 1069, 9339, 8339, 4187, 6091, 9152, 11937, 10549, 6800, 432, 2119, 8545, 8033, 5009, 6898, 6443, 9455, 4308, 4495, 3006, 973, 1311, 2099, 3551, 2920, 5410, 7656, 2551, 10436, 3799, 9322, 2896, 1384, 6401, 12144, 8529, 8969, 11439, 1767, 4604, 10224, 4718, 3247, 281, 9523, 10400, 8715, 10876, 3220, 11672, 5876, 11110, 10251, 3712, 9280, 31, 5873, 6541, 10593, 5896, 7465, 3287, 596, 7014, 6688, 9216, 3211, 7541, 3621, 1627, 11211, 8116, 8223, 7645, 1624, 1086, 1519, 3508, 4864, 4693, 9995, 11160, 5028, 8917, 10670, 11725, 4407, 7684, 3574, 7769, 11217, 3388, 10437, 8595, 6614, 5040, 560, 12067, 8406, 766, 12051, 3521, 8279, 11342, 11186, 9536, 6448, 7144, 11283, 4471, 7052, 9841, 5876, 4709, 416, 7331, 8688, 270, 11453, 8917, 11026, 749, 5376, 8800, 11980, 8403, 3112, 6159, 6873, 8818, 10665, 8260, 1857, 5604, 8087, 5490, 7480, 5503, 11255, 8114, 6356, 1018, 2077, 4388, 7627, 6154, 5256, 8042, 6668, 6749, 3720, 6601, 7170, 3286, 9454, 1698, 8050, 2181, 10272, 9682, 7891, 9685, 1280, 11146, 12040, 11577, 4561, 9234, 11516, 10454, 8819, 11330, 6188, 2029, 8474, 5279, 3773, 10890, 1504, 8012, 8613, 9968, 6197, 6906, 11904, 10787, 4280, 7088, 6238, 2380, 8858, 12020, 11990, 3004, 2930, 8324, 9421, 2053, 7550, 4959, 3675, 173, 3846, 5958, 1616, 5416, 9632, 1160, 10759, 5679, 12252, 5903, 8376, 5872, 6299, 11074, 1591, 12271, 2305, 12090, 2705, 7179, 5154, 1399, 6109, 6639, 883, 4809, 2680, 8925, 9882, 6164, 1116, 5931, 4013, 6634, 2550, 4607, 8534, 6742, 7635, 4755, 2636, 3000, 5305, 3789, 3940, 8584, 10314, 7222, 82, 8384, 3380, 939, 4861, 6147, 6388, 10256, 10522, 5609, 2142, 7634, 3690, 12218, 7314, 3177, 7339, 10847, 7451, 1710, 2574, 8926, 2865, 12070, 9897, 9950, 12195, 194};
  logic signed [14:0] public_key[N] = '{4162, 2099, 5489, 3551, 9391, 2920, 6649, 5410, 9653, 7656, 4881, 2551, 3686, 10436, 191, 3799, 134, 9322, 209, 2896, 164, 1384, 7392, 6401, 9905, 12144, 8495, 8529, 7293, 8969, 4815, 11439, 3294, 1767, 839, 4604, 8742, 10224, 10592, 4718, 8248, 3247, 3744, 281, 6163, 9523, 1295, 10400, 2169, 8715, 5157, 10876, 11103, 3220, 607, 11672, 10884, 5876, 8861, 11110, 3785, 10251, 2289, 3712, 9241, 9280, 7505, 31, 5670, 5873, 6103, 6541, 4897, 10593, 1033, 5896, 5286, 7465, 1379, 3287, 10307, 596, 641, 7014, 8319, 6688, 9477, 9216, 3892, 3211, 1451, 7541, 2889, 3621, 9928, 1627, 12176, 11211, 11807, 8116, 2460, 8223, 8461, 7645, 8496, 1624, 10919, 1086, 7983, 1519, 8422, 3508, 6967, 4864, 6227, 4693, 3056, 9995, 4623, 11160, 6298, 5028, 5439, 8917, 8560, 10670, 8381, 11725, 734, 4407, 7393, 7684, 3021, 3574, 7927, 7769, 8717, 11217, 3151, 3388, 9823, 10437, 9422, 8595, 6225, 6614, 11787, 5040, 4442, 560, 1744, 12067, 1977, 8406, 8793, 766, 11698, 12051, 6676, 3521, 4991, 8279, 11730, 11342, 10672, 11186, 4332, 9536, 1636, 6448, 5963, 7144, 7370, 11283, 11877, 4471, 5902, 7052, 7279, 9841, 2631, 5876, 5393, 4709, 10232, 416, 6038, 7331, 6327, 8688, 11727, 270, 12059, 11453, 3780, 8917, 5228, 11026, 9144, 749, 11746, 5376, 5752, 8800, 2103, 11980, 9384, 8403, 8473, 3112, 2373, 6159, 4415, 6873, 9460, 8818, 9163, 10665, 9091, 8260, 11614, 1857, 10776, 5604, 389, 8087, 4994, 5490, 12116, 7480, 12166, 5503, 10680, 11255, 4121, 8114, 4627, 6356, 9058, 1018, 3149, 2077, 6623, 4388, 1164, 7627, 1840, 6154, 2914, 5256, 8431, 8042, 6235, 6668, 2963, 6749, 528, 3720, 10720, 6601, 1478, 7170, 6478, 3286, 1821, 9454, 4654, 1698, 12127, 8050, 737, 2181, 5896, 10272, 9191, 9682, 10386, 7891, 1782, 9685, 3535, 1280, 5625, 11146, 9292, 12040, 7681, 11577, 9356, 4561, 3219, 9234, 6170, 11516, 5368, 10454, 2464, 8819, 7362, 11330, 1800, 6188, 9627, 2029, 10561, 8474, 9312, 5279, 11010, 3773, 691, 10890, 11883, 1504, 4994, 8012, 4376, 8613, 8197, 9968, 5674, 6197, 518, 6906, 3926, 11904, 11447, 10787, 10647, 4280, 947, 7088, 9298, 6238, 2672, 2380, 11190, 8858, 2054, 12020, 7283, 11990, 4058, 3004, 12081, 2930, 100, 8324, 8265, 9421, 10632, 2053, 1508, 7550, 11487, 4959, 3465, 3675, 6563, 173, 3042, 3846, 9701, 5958, 7049, 1616, 10832, 5416, 3938, 9632, 454, 1160, 7534, 10759, 9593, 5679, 7653, 12252, 6910, 5903, 10880, 8376, 2253, 5872, 3080, 6299, 8254, 11074, 9522, 1591, 10765, 12271, 9859, 2305, 479, 12090, 7497, 2705, 10067, 7179, 4580, 5154, 280, 1399, 2295, 6109, 1394, 6639, 1710, 883, 3762, 4809, 4816, 2680, 9975, 8925, 9657, 9882, 2350, 6164, 1091, 1116, 5891, 5931, 6702, 4013, 8428, 6634, 5510, 2550, 5582, 4607, 11639, 8534, 6440, 6742, 8870, 7635, 4272, 4755, 7797, 2636, 4430, 3000, 12035, 5305, 10113, 3789, 2792, 3940, 2818, 8584, 6637, 10314, 10100, 7222, 1042, 82, 3535, 8384, 6803, 3380, 1292, 939, 2259, 4861, 12283, 6147, 1069, 6388, 9339, 10256, 8339, 10522, 4187, 5609, 6091, 2142, 9152, 7634, 11937, 3690, 10549, 12218, 6800, 7314, 432, 3177, 2119, 7339, 8545, 10847, 8033, 7451, 5009, 1710, 6898, 2574, 6443, 8926, 9455, 2865, 4308, 12070, 4495, 9897, 3006, 9950, 973, 12195, 1311, 194};
  logic [63:0] message_blocks[MESSAGE_BLOCKS] = '{40+12, 64'h837e8bcfb23c5981, 64'h41d5b10176855b9a, 64'h92208190cdfbc47f, 64'h92e859a168bea29f, 64'ha335ead74efe6969, 64'h6f57206f6c6c6548, 64'h0000000021646c72};
  logic [63:0] signature_blocks[SIGNATURE_BLOCKS] = '{0, 5000, 64'ha0419223bd4a6372, 64'h1a58ccb4e73f1726, 64'h6639462c2cbc86c9, 64'h81588aba090bd137, 64'h7b848999c8bbb33d, 64'h93bb1ca8aa844b09, 64'h3598b2fb5ba24541, 64'h5933ca988644b44c, 64'h91a579213091ade0, 64'ha6f23b9cece4c224, 64'h652fa2675299f88b, 64'h147cec9df0fb914f, 64'h9aa94adaf9cba4db, 64'hbf52c026d4c9eb36, 64'h61e83d9fea72aff1, 64'hdb39f914f2263f74, 64'hd179686e69e490c5, 64'hdb3cef26159c884a, 64'he30b8fd9f571f986, 64'h8bc0fb2a6e615482, 64'h213bc49aa283ed2e, 64'h51fec9a331ab7b11, 64'hdddb4cb81c38177f, 64'h4263f8668cded02e, 64'hf8fcb704559002bd, 64'h75edffaa9697a774, 64'hec3076a4129facf7, 64'h2b9adc0ccb79f3d8, 64'hd9e3c28281a88eda, 64'h50786e95d40bd9c6, 64'h660ebb0dc9c1ba2e, 64'haa16962048a698cd, 64'hf61454095fe116a9, 64'h9599f8b65114d78d, 64'h3fdad68f91239d59, 64'h6499043cb8c3f0e4, 64'h88e847e2a4596d4c, 64'h4762e52bc037304c, 64'h9e28e95d25bbbf1c, 64'h18b8236dcc62f66a, 64'hc51d4bf6c1187c5b, 64'h4b9b65a2d38f0f43, 64'heb9e6f30b78a0bdf, 64'h53ebc0dcff54b308, 64'h233b9c8d9a61acba, 64'hd0165a3ec920ef41, 64'h539aafa91e4e78ab, 64'he6d4e6d5d32ee36f, 64'h43ba75bbba4fbbbe, 64'h7867772b1c3d12cf, 64'h77ac7497936dd2b5, 64'h3b736816c3d06163, 64'h10fc810b28572531, 64'h56d1e17b3d7ecdd7, 64'he0e24cfcf23eccc1, 64'h8e6d7f9018db639f, 64'h6f6bc7491378b6f5, 64'h92ab93ee57218fe5, 64'hd386ca611c772b83, 64'hda7dac6e5a0b8172, 64'hb37706c77dcefb30, 64'h862f374d40d40f51, 64'hb9424d242716e7fd, 64'hd15d05d088b59e15, 64'h6e8f15f9a4e9fcaf, 64'hfc9b3c0b552a12d4, 64'h3311ab8e958de47e, 64'h4e934138aa7c7910, 64'hdedc415068de5eff, 64'ha230de76d328a717, 64'h31de97acbc9a7392, 64'hddc718aee7922902, 64'h53eca64497ba1aae, 64'hc1647658f3205d66, 64'h26f4db4fbb31a55f, 64'hf712ce4b5d578614, 64'h9626ed3400000000, 64'h0000000000000000, 64'h0000000000000000};

  logic clk, rst_n;

  logic [31:0] instruction;
  logic instruction_done;
  logic [`FFT_BRAM_DATA_WIDTH-1:0] bram_din, bram_dout;

  always #5 clk = ~clk;

  control_unit #(
                 .N(N)
               ) control_unit (
                 .clk(clk),
                 .rst_n(rst_n),
                 .instruction(instruction),
                 .instruction_done(instruction_done),
                 .bram_din(bram_din),
                 .bram_dout(bram_dout)
               );

  initial begin

    clk = 1;

    rst_n = 0;
    #10;
    rst_n = 1;

    #10;

    // First NOP instruction to set we for all BRAMs to 0
    instruction = 32'b0000_000_000000000_000_000000000_0000;
    #10;

    // Load message len, salt and message into BRAM0
    for (int i = 0; i < MESSAGE_BLOCKS; i++) begin
      instruction = {4'b1001, 3'b000, i[8:0], 3'b000, 9'b000000000, 4'b0000}; // BRAM write; bank1=0; addr1=0; bank2=/; addr2=/; args=/
      bram_din = {64'b0, message_blocks[i]}; // Write 64 bits of message, padding with zeros
      #10;
    end
    instruction = 32'b0000_000_000000000_000_000000000_0000; // Stop writing to BRAM
    #10;

    // Load public key into BRAM1
    for (int i = 0; i < N/2; i++) begin
      instruction = {4'b1001, 3'b001, i[8:0], 3'b000, 9'b000000001, 4'b0000}; // BRAM write; bank1=1; addr1=i; bank2=/; addr2=/; args=/
      bram_din = {49'b0, public_key[2*i], 49'b0, public_key[2*i+1]};
      #10;
    end
    instruction = 32'b0000_000_000000000_000_000000000_0000; // Stop writing to BRAM
    #10;

    // Load signature into BRAM2
    for (int i = 0; i < SIGNATURE_BLOCKS; i++) begin
      instruction = {4'b1001, 3'b010, i[8:0], 3'b000, 9'b000000001, 4'b0000}; // BRAM write; bank1=2; addr1=i; bank2=/; addr2=/; args=/
      bram_din = {signature_blocks[2*i], signature_blocks[2*i+1]};
      #10;
    end
    instruction = 32'b0000_000_000000000_000_000000000_0000; // Stop writing to BRAM
    #10;

    // Run decompress
    instruction = 32'b0111_010_000000000_101_000000000_0110; // Decompress; bank1=2; addr1=/; bank2=5; addr2=/; args=destination_bank2=6
    while (instruction_done !== 1'b1)
      #10;
    instruction = 32'b0000_000_000000000_000_000000000_0000; 
    #10;

    // Run hash to point
    instruction = 32'b0001_000_000000000_011_000000000_0000; // Hash to point; bank1=0; addr1=/; bank2=3; addr2=/; args=/
    while (instruction_done !== 1'b1)
      #10;
    #40; // Wait for pipeline to finish

    instruction = 32'b0000_000_000000000_000_000000000_0000; 
    #10;

    // Run NTT(public key)
    instruction = 32'b1011_001_000000000_000_000000000_0000; // NTT; bank1=1; addr1=/; bank2=0(ntt, not fft bank); addr2=/; args=mode:ntt
    while (instruction_done !== 1'b1)
      #10;
    #10;

    instruction = 32'b0000_000_000000000_000_000000000_0000; 
    #10;

    // Run NTT(decompressed signature)
    instruction = 32'b1011_101_000000000_001_000000000_0000; // NTT; bank1=5; addr1=/; bank2=1(ntt, not fft bank); addr2=/; args=mode:ntt
    while (instruction_done !== 1'b1)
      #10;
    #10;

    instruction = 32'b0000_000_000000000_000_000000000_0000; 
    #10;

    // Compute public_key * decompressed signature % 12289(in NTT domain) by running mod_mult
    for (int i = 0; i < N/2; i++) begin
      logic [8:0] tmp = i + N/2;
      instruction = {4'b1100, 3'b000, i[8:0], 3'b000, tmp, 4'b0000}; // mod_mult; bank1=/; addr1=i; bank2=0; addr2=i+N/2;args=/
      #10;
    end
    #70;

    instruction = 32'b0000_000_000000000_000_000000000_0000; 
    #10;

    // Run INTT on the product
    instruction = 32'b1011_000_000000000_000_000000000_1000; // NTT; bank1=0; addr1=/; bank2=0(ntt, not fft bank); addr2=/; args=mode:intt
    while (instruction_done !== 1'b1)
      #10;
    #10;

    instruction = 32'b0000_000_000000000_000_000000000_0000;

  end

endmodule
