`timescale 1ns / 1ps
`include "common_definitions.vh"

module control_unit_sign_tb;

  parameter int N = 512;
  parameter int MESSAGE_BLOCKS = 8;
  logic signed [14:0] public_key[N] = '{3605, 11394, 3623, 9500, 11987, 4336, 3361, 1348, 6563, 8102, 758, 8455, 5789, 7614, 797, 11215, 7518, 3116, 4556, 1762, 11267, 9507, 4586, 5420, 4091, 6788, 1729, 6433, 4730, 1830, 4200, 1416, 3705, 5380, 5767, 9261, 924, 6822, 8978, 2536, 8232, 10530, 10137, 11653, 11704, 1887, 11653, 10218, 9207, 10699, 3288, 1478, 7261, 10152, 3871, 10134, 7359, 9993, 9510, 8661, 419, 1826, 978, 11037, 10899, 3311, 2064, 5939, 11072, 1748, 9516, 5458, 7665, 4459, 5937, 5615, 7288, 3438, 6009, 3217, 264, 3696, 608, 11576, 2774, 10976, 11146, 11188, 3237, 10913, 3541, 11755, 9412, 5720, 4226, 1154, 9010, 9922, 3994, 11252, 11575, 11077, 9308, 7784, 11086, 12047, 5310, 8524, 4117, 504, 3145, 12216, 2718, 1181, 5446, 1818, 6156, 1945, 11240, 7398, 8307, 8259, 10113, 11431, 10691, 2147, 2742, 8242, 12031, 8808, 7609, 3657, 3567, 2485, 7669, 4388, 3255, 1395, 596, 9635, 6739, 10284, 4910, 9410, 11788, 10978, 3877, 4006, 1860, 6225, 8834, 11969, 11742, 9733, 8790, 7871, 10347, 2658, 4468, 947, 3384, 9733, 6496, 382, 81, 7977, 7138, 8962, 10195, 2830, 10227, 5302, 9974, 9157, 7442, 4931, 9761, 5759, 2115, 431, 12242, 2353, 7529, 7822, 6343, 3370, 9369, 8491, 6742, 5681, 10973, 412, 12105, 6913, 5565, 3760, 4378, 4454, 9070, 1289, 2596, 5355, 12117, 2787, 3798, 4954, 9708, 2191, 2935, 4073, 7455, 11661, 4170, 8782, 9611, 8647, 2318, 4779, 11339, 3962, 361, 9358, 7727, 11723, 9018, 10552, 3025, 6852, 6028, 10603, 7147, 8434, 5604, 4483, 5954, 426, 11403, 2643, 8294, 9504, 7268, 8958, 2773, 7764, 5926, 8213, 2100, 8814, 7540, 4212, 7012, 353, 7166, 5717, 9799, 10379, 7768, 9515, 2534, 4504, 5410, 5358, 1879, 11581, 10692, 2614, 11002, 11667, 7333, 6932, 4254, 9503, 7386, 2581, 4153, 6079, 6149, 5496, 2397, 11735, 6496, 9250, 11872, 10842, 2934, 4022, 10681, 914, 4397, 7287, 9673, 4709, 4895, 3770, 3146, 7254, 4953, 11018, 9062, 3817, 11979, 8723, 3091, 2675, 8946, 7376, 3652, 6861, 8298, 5547, 11, 4758, 10734, 7434, 11702, 6466, 9135, 11199, 10059, 503, 2510, 1730, 6101, 11965, 10264, 6045, 11690, 11530, 761, 9270, 4531, 5482, 6951, 5776, 10348, 2668, 5246, 8046, 7106, 11302, 3276, 6632, 12008, 6564, 8465, 1953, 5904, 1036, 3109, 5020, 11945, 458, 11742, 5271, 4474, 9918, 7963, 11786, 8318, 756, 560, 11377, 1084, 9634, 9203, 1062, 8461, 1845, 3719, 6672, 6660, 4711, 11337, 10460, 5367, 4072, 7043, 5567, 6356, 657, 8877, 3633, 11487, 10421, 10877, 5052, 2174, 4711, 11853, 4461, 10942, 11619, 7591, 3424, 3372, 4493, 11393, 7115, 9057, 7145, 2060, 9137, 707, 1968, 7853, 645, 253, 2697, 9294, 8357, 7503, 6187, 7505, 8302, 4635, 8899, 9258, 8559, 7988, 9571, 243, 6979, 8233, 11555, 5257, 8361, 1836, 11185, 3771, 3517, 10585, 4756, 10212, 2035, 2778, 6798, 11229, 11768, 8707, 7931, 3744, 10939, 5317, 6104, 11137, 3936, 5418, 4368, 201, 3094, 8211, 6803, 2559, 3164, 6846, 8515, 8894, 8556, 2219, 9593, 6391, 3374, 4868, 192, 2791, 4309, 62, 20, 9968, 8831, 11185, 1365, 9722, 5623, 2398, 5049, 2241, 6060, 998, 4233, 1455, 5324, 1053, 5626, 1726, 11569, 12033, 4897, 859, 1676, 2097, 11147, 5155, 5187, 2026, 12050, 5615, 5450, 260, 7526, 11923, 6346, 7221, 405, 882, 842, 4621, 4130, 3513, 114, 3673, 4914};
  logic [63:0] message_blocks[MESSAGE_BLOCKS] = '{12+40, 64'h837e8bcfb23c5981, 64'h41d5b10176855b9a, 64'h92208190cdfbc47f, 64'h92e859a168bea29f, 64'ha335ead74efe6969, 64'h6f57206f6c6c6548, 64'h0000000021646c72};

  logic signed [7:0] g [N] = '{-6, -2, 4, -8, -4, 2, 3, 4, 1, -1, 3, 0, 2, 3, -3, 1, -7, -5, 3, -3, -1, 3, -3, 8, -6, -6, 0, 6, 4, 7, 3, 5, 0, -5, -3, -5, 7, 3, -1, -4, 3, 4, -1, 1, 3, -3, -4, -4, 4, -5, -1, 3, 7, -2, -4, -2, -3, -1, -2, -1, -2, -6, -7, -3, -6, -3, -6, 4, -1, -5, 1, 4, -4, 3, -1, -6, 6, -2, 2, -6, 5, -7, 8, -3, 0, -2, 0, 7, 1, 3, 6, 4, -5, 2, 2, 2, 4, -4, -5, -4, -3, 4, -7, 7, -6, -2, -7, 1, -2, -2, -3, 1, 3, 7, 0, -1, -5, 4, -8, -8, 0, 3, 6, -3, 2, 6, -1, 1, -5, -4, 2, -3, 8, -2, 2, 3, 0, 1, 6, 4, 4, -4, -1, -3, -2, -5, 3, 9, 0, 4, -1, 1, -4, 0, 3, 0, -2, 8, 0, 1, 0, -1, 1, 9, -1, -4, -1, 3, 5, -2, -2, 1, -1, 1, -1, 0, 1, 0, -6, -2, 0, 7, -3, -4, -1, -6, -2, 5, -2, 0, 4, -3, -5, 0, 1, -1, -3, 5, 5, -4, -4, -5, -1, 9, -1, -5, -7, -1, -2, 4, 2, 5, -4, -1, -5, 8, -3, -6, -2, 1, -2, 1, 1, 4, -4, -1, 4, 1, 1, 0, -5, 1, 7, 2, -3, 3, -2, -4, 1, -6, -1, -3, 7, 6, 0, -2, 2, -6, -4, -3, 2, -7, 7, 0, -11, -1, 3, 4, 0, 6, -8, -4, -1, 1, 0, -3, 7, 0, 0, -2, -1, -4, 0, -1, -3, 7, -6, -2, -2, -1, 0, -2, 8, -6, 4, 4, 6, -2, -1, 0, -13, 1, 2, 0, 5, -7, 3, -2, -6, -3, -4, 4, -1, 1, 3, -6, 1, -5, -8, 2, -11, -1, 2, -2, 0, 0, 1, 1, -4, -5, 0, 1, 0, 1, -6, -2, 2, 0, 7, 1, -1, 1, -2, 1, -3, 1, 2, 1, -7, -2, 2, -1, 4, 1, -2, -2, 0, 4, -3, -6, 2, 3, 1, 1, -4, 6, -2, -4, -3, 0, 4, -5, 0, 1, 8, 2, 2, -1, 1, -2, -4, -1, 4, 4, -1, 7, 2, -1, -3, -8, 3, 1, 1, 0, -1, 1, -7, -8, 2, 1, -2, 1, 0, 4, 1, 1, -2, -1, -5, 3, -4, -1, -1, -8, 2, -4, 3, 2, -5, 0, 1, 5, 2, -5, -2, 3, 7, 5, 6, 5, -2, 1, 3, -7, 7, -3, -8, -2, 2, 3, 3, 5, -2, -4, -1, 7, -2, 7, -3, -2, 0, 3, 5, 0, 0, 4, 8, -1, -5, 3, -2, -2, -5, -5, -2, 2, 5, -8, -1, -2, -4, 6, 0, 6, -5, -1, -5, -6, 9, 5, -2, 4, -1, -8, -2, -2, 1, -8, -5, 6, -1, 0, 5, -6, -3, -3, -2, -6, -2, 0, -1, -3, 7, -3, -1, 3, 6, 3, -2, -4, 2, 1, -1, 11, 3, 4, -1, -6, 1, 2, 3, 3};
  logic signed [7:0] f [N] = '{4, -4, 0, -6, 6, -6, 2, 1, -8, 0, -2, 0, -1, -1, -4, 8, -5, 3, -2, 2, 0, -5, -2, -1, 3, -4, -5, -1, 8, 1, 1, 7, 5, 1, 6, 2, -1, -13, 1, -4, 9, -4, -2, 4, -4, 0, -1, -1, -3, 2, 1, 1, 1, 3, -3, 2, -1, -1, -5, 9, 4, -7, -3, -8, -3, -2, -3, -6, -6, -3, -2, -2, 2, 1, -10, -2, -2, 4, 2, 0, -2, -2, 4, -3, 5, 2, -2, 3, 8, 1, 8, -3, -4, 2, 7, -5, -4, -2, -2, -3, 5, -5, 0, -3, -5, 3, -6, -2, 3, 0, 3, 1, 2, -2, 1, 6, -1, -7, 0, -5, 3, -5, 9, 0, 1, 5, -4, 0, 5, -1, 4, 3, 5, -6, 2, 0, -7, 1, 0, 0, 2, 4, 1, -7, -3, 4, 4, -2, -7, -5, 6, 3, 2, -5, 6, -1, -1, -4, 1, 2, 1, 2, -10, -9, -9, -1, 3, -2, -2, -6, 1, -2, -4, -1, 2, 3, 8, 2, 1, -1, 8, 0, 7, 3, 1, 5, 0, -7, 1, -6, -4, 4, 2, 0, 0, -3, 2, 0, -3, 0, 7, -1, -1, -7, 2, 5, 3, 0, 1, 6, -2, -1, 2, 0, -1, -3, -6, -5, -5, -4, 0, 1, 7, 1, -3, 2, 2, -5, 0, -4, 3, -4, 5, 3, 4, 7, -2, 15, -3, 1, 1, 4, 5, -9, -3, 4, 2, -4, -4, -3, -1, -4, 3, -1, 1, -8, -4, -1, 0, -3, 1, -1, 3, 3, 3, -3, -6, -7, 7, 0, -6, 2, -1, 4, 7, 1, 4, 0, 1, 6, -1, -2, -2, 5, 0, 6, -3, -2, -5, 3, -1, 0, 5, -2, 8, -5, -4, 1, -3, 8, 2, -4, 1, 6, 0, 0, -1, 0, -4, -5, -2, 3, -2, 5, 1, 4, 5, -4, 4, -1, 4, -5, -2, 1, 3, -5, 1, 2, -2, 0, -5, 1, 8, -3, -4, 3, -2, -3, -4, 4, 3, -2, 6, -3, -2, 4, 0, -2, 0, -5, 1, -9, 5, 6, -2, -6, 1, 5, -1, -7, 1, 2, 5, 2, 0, -1, 0, -2, -4, -1, -8, 5, -5, 9, -4, -4, 2, -5, -1, 0, 1, 4, 3, 1, -2, -7, -8, -4, -4, 4, 3, -1, 4, -1, -1, 1, 0, 6, 1, 0, -6, -2, 0, -3, 0, -1, -1, 0, 3, -5, -2, -5, 6, 2, -4, -3, 4, -8, 1, -1, 4, -3, 5, -2, 8, 7, -1, -3, -3, -2, 0, -4, 4, 0, -6, -4, -2, 5, 8, -3, 3, -1, 0, -5, -5, 0, 2, -5, -2, -3, 1, 6, 3, 1, -3, 4, -3, 0, -7, -1, -3, 1, -5, 1, -4, -2, 2, 4, 0, 1, 5, 2, 2, -3, -5, -8, 4, -2, -3, 2, 2, 0, 8, -5, 2, -7, 0, 3, -1, 0, 4, -3, 1, -2, -4, -6, -5, 0, -4, 1, -3, 9, 1, -3, -2, -3, 5, -1, -4, -7, 1, 1};
  logic signed [7:0] G [N] = '{-58, -47, 36, 14, 2, -20, 24, 35, 38, -31, 20, -1, -17, -29, -6, 25, 16, 4, -75, 32, 20, 17, -8, 24, 13, 7, -11, -2, 3, -2, 6, 16, 22, 37, -25, -4, -32, -21, 57, 0, 20, 73, 20, -9, 6, -49, 12, 14, 60, 15, 50, 15, 9, -2, 13, -8, 38, 12, -5, 9, -7, -1, -30, -2, -28, -6, 6, -18, 5, 1, -15, -15, -1, 15, -4, -12, -1, -37, -12, 33, -2, -17, -8, -57, -64, -7, 3, 3, -15, 1, 3, 15, -21, 67, -29, -4, 7, -21, -7, -8, 12, 38, 3, 45, -26, -37, 10, 24, -15, -24, 23, -13, -27, 12, 14, -16, 22, -19, 15, 1, -7, 0, -6, 28, 2, -7, 0, -10, -19, 14, -13, -16, 22, 14, -7, -1, -17, 31, -7, 12, 4, -8, -13, 18, -8, -38, 6, 49, 40, 1, -5, 1, 17, -21, -3, -9, 15, 27, 43, 60, 29, -1, -3, 2, -41, 18, -18, -26, 29, 13, 12, 15, 38, -24, -25, 8, 17, 10, -32, -3, -39, -29, 23, 30, 6, 3, 23, -15, -26, 34, -59, 3, -54, 37, 27, -26, 23, -40, -10, -15, 7, 9, -1, 24, -33, -36, 29, -7, 13, 29, 56, -13, 36, -37, -45, 13, -11, 43, -9, 24, 16, -13, 13, 13, 10, -18, 16, 3, -14, -27, -16, -5, -35, -25, -42, 51, -5, -41, 20, -27, 47, 14, 75, 14, -74, 26, -18, 18, -12, -13, 8, -44, 6, 0, -16, 36, 32, -33, 6, 5, -23, -14, -32, 15, 27, 56, 10, -43, 8, 16, -63, 8, 34, -24, -3, 15, 13, -3, -31, -14, -24, 28, 11, -41, -4, 14, 1, -11, 40, 32, -22, 19, -16, 27, -2, 36, 40, -11, -2, 2, -11, -2, 35, -44, 6, 6, -40, 3, -8, -27, -28, 5, -6, -12, -2, -4, -19, -64, 36, -33, -16, -5, 20, -9, 10, 59, 16, -8, 27, 28, -6, 10, -8, 11, -35, 23, 35, 34, 47, 13, 2, 44, 8, 38, 4, 34, 41, 15, 20, 28, 29, 35, 4, 23, 7, 8, -19, -17, 8, 5, 10, -21, -9, 15, -28, -4, -23, -17, 18, -15, -2, 9, -24, -7, 7, 51, -31, 40, -57, 30, 23, -12, -18, -9, 37, -29, -4, 18, -10, 20, -54, -21, 23, 56, 28, 30, -3, 15, -31, -41, 14, 66, 41, 15, 39, 34, -9, 4, 33, 18, 25, 6, 38, -27, 63, -21, -24, 43, 11, -37, 16, 26, -31, -30, 16, -20, -3, 10, 11, -58, 18, 13, 0, 22, -25, 13, -32, -14, 5, 52, 31, 30, -3, 9, 18, -7, 4, -2, 1, 11, -8, 8, -9, -29, 28, -25, 51, 47, 24, -72, -4, 41, -15, 17, 50, 2, -1, 2, -41, -33, -20, 6, -19, -33, 23, 8, -19, 12, -19, -2, -61, -7, -19, 6, 8, -23, 27, 38, 12, -17, 39, 8, 23, -41, 14, 25, 16, -44, -46, 11, 31, -6, 9, 24, 23, 37, -57, 22, 21, -22, 21, 44};
  logic signed [7:0] F [N] = '{-3, -27, 4, 18, 39, 7, 20, -13, 33, -29, 3, 38, 30, 26, -6, 24, -26, 16, 24, -48, -18, -21, 3, -14, -2, 6, -9, 42, 22, 21, 33, -27, -14, -14, -56, -68, -2, -33, 6, -38, -43, 21, 13, 6, 2, -69, -10, -30, -27, 23, -1, 41, -21, 11, -20, 15, 39, 5, 41, 15, -28, -34, 9, -11, 9, -1, -8, 61, 8, 13, -23, 2, 7, -23, -21, -54, -11, -9, -19, 40, 37, -2, -16, 19, -16, 2, -78, -35, -19, 11, 17, -46, -16, 25, 0, 22, 13, -15, -33, 13, -15, -34, 33, -13, 38, 39, 37, -29, 40, 7, 63, 35, 15, 21, -24, 16, -6, 30, 12, 18, 61, 17, -11, -15, 11, 0, -15, -2, -14, -26, -1, -42, -10, -52, 64, 45, 22, 6, -22, 32, -50, -16, -12, -16, -8, 34, -17, -18, 7, 19, 37, 41, -5, -22, -12, -7, -17, -27, -17, 4, 36, 0, 22, -4, -50, 24, 30, 5, 1, -50, 43, 0, 0, -6, -9, 34, 0, 14, -27, 17, 35, -30, -13, 3, -23, -46, 17, -34, 30, 24, 47, 31, -7, 11, 10, 16, 30, 27, -4, 11, -4, -14, -28, 49, 0, 27, -5, -10, 53, -50, -13, -15, 13, -10, -26, 2, -3, 88, 22, -27, 40, -23, 3, -42, 2, -27, -12, 35, 26, -33, 38, -42, -5, 17, -24, 6, -10, 13, -10, -30, -35, -17, 25, 49, -29, 48, 19, 37, 48, -25, -31, -41, -15, -1, 19, -17, -7, -16, 2, 5, 12, 0, -15, -19, -6, -32, -4, -56, 14, -6, -7, 17, 24, -1, 17, -35, 5, 3, -64, -15, 4, 0, -31, 4, -10, -18, 55, 13, -13, 23, -30, -11, -29, -21, 15, -18, 30, 39, 16, -27, 31, 4, 31, 39, -49, 11, -25, 37, -42, -72, 28, -57, 13, 34, 6, 10, -17, -3, -19, -43, -1, -32, 9, -11, 9, 11, -23, 6, 28, -34, -12, -42, -7, 42, -18, -2, 22, -30, -4, -42, 10, 54, -16, 19, -23, -4, 18, -58, 26, -3, -38, 20, 38, 23, 20, 0, 10, 49, 47, 18, 27, -11, -10, -14, 0, 6, 6, -18, -6, 14, -38, -16, 12, -17, 17, -21, -52, -3, -53, 9, 9, -4, 44, 9, -4, 17, 2, 10, -28, -13, 28, -12, 11, -33, -2, 33, 0, -51, 2, -33, 20, -47, 23, 42, 2, 52, -18, -17, 35, 6, 27, 3, 11, 24, -8, 0, -35, -44, -22, -49, 61, 3, -15, -2, -14, 46, -24, -10, -24, -24, -21, -10, -51, -3, 31, 20, 1, -44, 18, 9, 38, 26, -17, -8, 2, 33, 24, -8, -9, -20, 32, 54, 47, -11, 40, 3, -58, 13, 17, 29, -21, 27, 4, -31, 14, 14, 17, 19, -29, 19, -86, -29, -15, -35, 18, 53, -10, 9, 13, -38, 9, -4, 80, 0, 6, 1, 15, -14, 0, -5, 45, 26, 50, 28, 21, 1, -8, -6, 12, 32, 5, -21, -1, 54, 14, 22, 27, 6, 8, -18, 33, -5};

  logic clk, rst_n;

  logic [31:0] instruction;
  logic instruction_done;
  logic [`FFT_BRAM_DATA_WIDTH-1:0] bram_din, bram_dout;

  always #5 clk = ~clk;

  control_unit #(
                 .N(N)
               ) control_unit (
                 .clk(clk),
                 .rst_n(rst_n),
                 .instruction(instruction),
                 .instruction_done(instruction_done),
                 .bram_din(bram_din),
                 .bram_dout(bram_dout)
               );

  initial begin

    clk = 1;

    rst_n = 0;
    #10;
    rst_n = 1;

    #10;

    // First NOP instruction to set we for all BRAMs to 0
    instruction = 32'b0000_000_000000000_000_000000000_0000;
    #10;

    // Load g into BRAM0
    for (int i = 0; i < N/2; i++) begin
      logic signed [63:0] tmp1, tmp2;
      tmp1 = g[i];
      tmp2 = g[i+N/2];
      instruction = {4'b1000, 3'b000, i[8:0], 3'b000, 9'b000000000, 4'b1100}; // BRAM write; bank1=0; addr1=i; bank2=/; addr2=/; args=write,int_to_double
      bram_din = {tmp1, tmp2};
      #10;
    end
    #10;  // Wait for pipeline to finish
    instruction = 32'b0000_000_000000000_000_000000000_0000; // Stop writing to BRAM
    #10;

    // Load f into BRAM1
    for (int i = 0; i < N/2; i++) begin
      logic signed [63:0] tmp1, tmp2;
      tmp1 = f[i];
      tmp2 = f[i+N/2];
      instruction = {4'b1000, 3'b001, i[8:0], 3'b000, 9'b000000000, 4'b1100}; // BRAM write; bank1=1; addr1=i; bank2=/; addr2=/; args=write,int_to_double
      bram_din = {tmp1, tmp2};
      #10;
    end
    #10;  // Wait for pipeline to finish
    instruction = 32'b0000_000_000000000_000_000000000_0000; // Stop writing to BRAM
    #10;

    // Load G into BRAM2
    for (int i = 0; i < N/2; i++) begin
      logic signed [63:0] tmp1, tmp2;
      tmp1 = G[i];
      tmp2 = G[i+N/2];
      instruction = {4'b1000, 3'b010, i[8:0], 3'b000, 9'b000000000, 4'b1100}; // BRAM write; bank1=2; addr1=i; bank2=/; addr2=/; args=write,int_to_double
      bram_din = {tmp1, tmp2};
      #10;
    end
    #10;  // Wait for pipeline to finish
    instruction = 32'b0000_000_000000000_000_000000000_0000; // Stop writing to BRAM
    #10;

    // Load F into BRAM3
    for (int i = 0; i < N/2; i++) begin
      logic signed [63:0] tmp1, tmp2;
      tmp1 = F[i];
      tmp2 = F[i+N/2];
      instruction = {4'b1000, 3'b011, i[8:0], 3'b000, 9'b000000000, 4'b1100}; // BRAM write; bank1=3; addr1=i; bank2=/; addr2=/; args=write,int_to_double
      bram_din = {tmp1, tmp2};
      #10;
    end
    #10;  // Wait for pipeline to finish
    instruction = 32'b0000_000_000000000_000_000000000_0000; // Stop writing to BRAM
    #10;

    // Load message len, message and salt into BRAM6
    for (int i = 0; i < MESSAGE_BLOCKS; i++) begin
      instruction = {4'b1000, 3'b110, i[8:0], 3'b000, 9'b000000000, 4'b1000}; // BRAM write; bank1=6; addr1=i; bank2=/; addr2=/; args=write
      bram_din = {64'b0, message_blocks[i]}; // Write 64 bits of message, padding with zeros
      #10;
    end
    instruction = 32'b0000_000_000000000_000_000000000_0000; // Stop writing to BRAM
    #10;

    // Run first set of instructions (SIGN_STEP_1)
    for (int i = 0; i < N/2; i++) begin
      instruction = {4'b0011, 3'b000, i[8:0], 3'b000, i[8:0], 4'b0001}; // COMBINED; bank1=/; addr1=i; bank2=/; addr2=i; args=SIGN_STEP_1
      #10;
    end
    while (instruction_done !== 1'b1)
      #10;
    instruction = 32'b0000_000_000000000_000_000000000_0000;
    #10;

    // Run second set of instructions (SIGN_STEP_2)
    for (int i = 0; i < N/2; i++) begin
      instruction = {4'b0011, 3'b000, i[8:0], 3'b000, i[8:0], 4'b0010}; // COMBINED; bank1=/; addr1=i; bank2=/; addr2=i; args=SIGN_STEP_2
      #10;
    end
    while (instruction_done !== 1'b1)
      #10;
    instruction = 32'b0000_000_000000000_000_000000000_0000;
    #10;

    // Run third set of instructions (SIGN_STEP_3)
    for (int i = 0; i < N/2; i++) begin
      instruction = {4'b0011, 3'b000, i[8:0], 3'b000, i[8:0], 4'b0011}; // COMBINED; bank1=/; addr1=i; bank2=/; addr2=i; args=SIGN_STEP_3
      #10;
    end
    while (instruction_done !== 1'b1)
      #10;
    instruction = 32'b0000_000_000000000_000_000000000_0000;
    #10;

    // Run fourth set of instructions (SIGN_STEP_4)
    for (int i = 0; i < N/2; i++) begin
      instruction = {4'b0011, 3'b000, i[8:0], 3'b000, i[8:0], 4'b0100}; // COMBINED; bank1=/; addr1=i; bank2=/; addr2=i; args=SIGN_STEP_4
      #10;
    end
    while (instruction_done !== 1'b1)
      #10;
    instruction = 32'b0000_000_000000000_000_000000000_0000;
    #10;

    // Run fifth set of instructions (SIGN_STEP_5)
    for (int i = 0; i < N/2; i++) begin
      instruction = {4'b0011, 3'b000, i[8:0], 3'b000, i[8:0], 4'b0101}; // COMBINED; bank1=/; addr1=i; bank2=/; addr2=i; args=SIGN_STEP_5
      #10;
    end
    while (instruction_done !== 1'b1)
      #10;
    instruction = 32'b0000_000_000000000_000_000000000_0000;
    #10;

    // Run sixth set of instructions (SIGN_STEP_6)
    for (int i = 0; i < N/2; i++) begin
      instruction = {4'b0011, 3'b000, i[8:0], 3'b000, i[8:0], 4'b0110}; // COMBINED; bank1=/; addr1=i; bank2=/; addr2=i; args=SIGN_STEP_6
      #10;
    end
    while (instruction_done !== 1'b1)
      #10;
    instruction = 32'b0000_000_000000000_000_000000000_0000;
    #10;

    // Run seventh set of instructions (SIGN_STEP_7)
    for (int i = 0; i < N/2; i++) begin
      instruction = {4'b0011, 3'b000, i[8:0], 3'b000, i[8:0], 4'b0111}; // COMBINED; bank1=/; addr1=i; bank2=/; addr2=i; args=SIGN_STEP_7
      #10;
    end
    while (instruction_done !== 1'b1)
      #10;
    instruction = 32'b0000_000_000000000_000_000000000_0000;
    #10;

    // Run eighth set of instructions (SIGN_STEP_8)
    for (int i = 0; i < N/2; i++) begin
      instruction = {4'b0011, 3'b000, i[8:0], 3'b000, i[8:0], 4'b1000}; // COMBINED; bank1=/; addr1=i; bank2=/; addr2=i; args=SIGN_STEP_8
      #10;
    end
    while (instruction_done !== 1'b1)
      #10;
    instruction = 32'b0000_000_000000000_000_000000000_0000;
    #10;

    // Run ninth set of instructions (SIGN_STEP_9)
    for (int i = 0; i < N/2; i++) begin
      instruction = {4'b0011, 3'b000, i[8:0], 3'b000, i[8:0], 4'b1001}; // COMBINED; bank1=/; addr1=i; bank2=/; addr2=i; args=SIGN_STEP_9
      #10;
    end
    while (instruction_done !== 1'b1)
      #10;
    instruction = 32'b0000_000_000000000_000_000000000_0000;
    #10;

    instruction = 32'b0000_000_000000000_000_000000000_0000;

  end

endmodule
